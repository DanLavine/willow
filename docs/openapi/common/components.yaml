components:
  schemas:
    # General API errors
    ApiError:
      type: object
      properties:
        Error:
          type: string
    # Defines how values should be parsed
    DataType:
      type: integer
      description: |
        DataType indicates how to parse and convert the provided Value:\
        1: uint8\
        2: uint16\
        3: uint32\
        4: uint64\
        5: uint\
        6: int8\
        7: int16\
        8: int32\
        9: int64\
        10: int\
        11: float32\
        12: float64\
        13: string
      enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]

    # Generic data type wrapper for any Values in a Key Value pairing
    EncapsulatedValue:
      type: object
      required:
        - DataType
        - Value
      properties:
        DataType:
          $ref: "#/components/schemas/DataType"
        Value:
          description: |
            String value for the associated DataType that can be convertied into the desribed type
          type: string

    # Map of Encapsulated data
    KeyValues:
      type: object
      additionalProperties:
        title: KeyValues
        x-additionalPropertiesName: KeyValues
        $ref: "#/components/schemas/EncapsulatedValue"

    # Match KeyValues
    MatchQuery:
      type: object
      properties:
        KeyValues:
          description: |
            Leave this empty to match all possible KeyValues
          allOf:
            - $ref: "#/components/schemas/KeyValues"

    # General query thats used all over the place
    AssociatedKeyValues:
      type: object
      properties:
        KeyValueSelection:
          type: object
          $ref: "#/components/schemas/KeyValueSelection"
        OR:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedKeyValuesQuery"
        AND:
          type: array
          items:
            $ref: "#/components/schemas/AssociatedKeyValuesQuery"

    AssociatedKeyValuesQuery:
      type: object
      description: |
        General query that is used for many list apis. When resolving the query,
        'and' operations have higher precedent than 'or'
      properties:
        AssociatedKeyValues:
          allOf:
            - $ref: "#/components/schemas/AssociatedKeyValues"

    # Map of KeyValues
    KeyValueSelection:
      type: object
      description: |
        Selection of key values to query. The 'Limits' parameter can be used to find the exact
        `KeyValues` to find. If this is not provided, then any saved `KeyValues` will be used
        that match the requested 'KeyValues'
      properties:
        KeyValues:
          type: object
          description: |
            Map of Values
          additionalProperties:
            $ref: "#/components/schemas/Values"
        Limits:
          type: object
          properties:
            KeyLimits:
              type: integer

    # Values query selection
    Values:
      type: object
      description: |
        Query selection that needs to be either 'Exists' or 'Value' check
      properties:
        Exists:
          description: |
            Pointer that can be used to select any value when true, or exclude values when false
          type: bool
        ExistsType:
          $ref: "#/components/schemas/DataType"
        Value:
          $ref: "#/components/schemas/EncapsulatedValue"
        ValueComparison:
          description: |
            parameter that is required when `Value` is set. For any of the comparisons that include
            the 'MATCH' string, it enforces that the `Value's` type matches all results of the query.
          type: string
          enum:
            [
              "=",
              "!=",
              "<",
              "< MATCH",
              "<=",
              "<= MATCH",
              ">",
              "> MATCH",
              ">=",
              ">= MATCH",
            ]
