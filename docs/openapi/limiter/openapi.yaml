openapi: "3.0.0"

info:
  description: Limiter API
  title: Limiter
  version: a0.0.1

paths:
  /v1/limiter/rules:
    post:
      operationId: create Rule
      requestBody:
        description: |
          Create a new Limiter Rule.
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/RuleRequest"
      responses:
        201:
          description: |
            Created a new limiter rule. When adding a counter, each Rule that matches the the `Counter.KeyValues` request
            is evaluated to ensure that the specific Rule's GroupBy slection has not hit the limit. It is importnat to
            note that if multiple `Rules` all match the same `Counter.KeyValues` they will all be evaluated.

            There is specual logic when a Rule has a Limit = 0. In this case the service will respond quickly rejecting
            The request saying the limit has been reached
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        422:
          description: Conflict if another rule already exists with the same name
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    get:
      operationId: list Rules
      requestBody:
        description: |
          List any Rules that match the particular `KeyValues` and their `Overrides`
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/RuleQuery"
      responses:
        200:
          description: Successfully searched for any rules that matched the query
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ListRulesResponse"
        400:
          description: Error parsing or validating the request
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
  /v1/limiter/rules/:rule_name:
    get:
      operationId: get Rule
      requestBody:
        description: |
          Get the `Rule` by name and optionaly `Overrides`
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/RuleQuery"
      responses:
        200:
          description: |
            Retrieve a single Rule's specification
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/RuleResponse"
        400:
          description: Error parsing or validating the request parameters
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        422:
          description: The `Rule` could not be found
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    put:
      operationId: update Rule
      requestBody:
        description: |
          update a specific `Rule`.
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/UpdateRuleRequest"
      responses:
        200:
          description: Successfully updated the `Rule`
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        422:
          description: The original `Rule` could not be found
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    delete:
      operationId: delete Rule
      description: |
        Delete a specific `Rule` and any `Overrides` associated with the rule
      responses:
        204:
          description: Successfully deleted the `Rule` and all associatted `Overrides`
        500:
          description: Unexpected error service side
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
  /v1/limiter/rules/:rule_name/overrides:
    post:
      operationId: create Rule Override
      requestBody:
        description: |
          Create a new `Override` for a set of KeyValues. If multiple `Overrides` have
          the same KeyValues then an API error will be returned.

          When matching a `Counter.KeyValues` and there are multiple `Overrides` that match.
          The lowest of all `Overrides.Limit` will be selected
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/RuleOverride"
      responses:
        201:
          description: Created a new `Override` for a given `Rule`
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        404:
          description: returned if the `Rule` name cannot be found
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        422:
          description: Conflict if another `Override` already exists with the same KeyValues or Name
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    get:
      operationId: list Rule Overrides
      requestBody:
        description: |
          List any `Overrides` that match the provided KeyValues
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/KeyValues"
      responses:
        200:
          description: A collection of `Overrides`
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/RuleOverrides"
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
  /v1/limiter/rules/:rule_name/overrides/:override_name:
    get:
      operationId: get Rule Override
      responses:
        200:
          description: Successfully found the desired `Override` for a `Rule`
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/RuleOverride"
        400:
          description: Error parsing or validating the request
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        422:
          description: The `Rule` or `Override` could not be found
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    delete:
      operationId: delete Rule Override
      responses:
        204:
          description: deleted the Rule Override
        422:
          description: Conflict if the `Rule` or `Override` do not exist
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
  /v1/limiter/counters:
    post:
      operationId: increment Key Values
      requestBody:
        description: |
          Increment a counter associated with the Key Values. As part of this operation, all `Rules` are matched
          to ensure that they have not reached a limit for the KeyValues in this request. If that has happened,
          then the request will fail and it is up to the client to retry the request eventually.
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/KeyValues"
      responses:
        200:
          description: Incremented the group of KeyValues
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        409:
          description: Conflict if a particular `Rule's` limits are already reached
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/LimitReachedResponse"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
    delete:
      operationId: decrement Key Values Group
      requestBody:
        description: |
          Decrement the group of KeyValues. If the index would be 0, the group is removed entierly
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/KeyValues"
      responses:
        204:
          description: Key Values Group was decremeneted
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "#/components/schemas/ApiError"

components:
  schemas:
    # General API errors
    ApiError:
      type: object
      properties:
        Error:
          type: string

    # General query thats used all over the place
    AssociatedKeyValuesQuery:
      type: object
      properties:
        KeyValueSelection:
          type: object
          $ref: "#/components/schemas/KeyValueSelection"
        OR:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/AssociatedKeyValuesQuery"
        AND:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/AssociatedKeyValuesQuery"

    KeyValueSelection:
      type: object
      properties:
        KeyValues:
          type: object
          $ref: "#/components/schemas/KeyValues"
        Limits:
          type: object
          properties:
            KeyLimits:
              type: integer

    # General Key Values of Encapsulated data
    KeyValues:
      type: object
      additionalProperties:
        title: KeyValues
        x-additionalPropertiesName: KeyValues
        $ref: "#/components/schemas/EncapsulatedData"

    # Generic data type wrapper for any Values in a Key Value pairing
    EncapsulatedData:
      type: object
      required:
        - DataType
        - Value
      properties:
        DataType:
          description: |
            Data type indicates how to parse the provided Value:\
            0: uint8\
            1: uint16\
            2: uint32\
            3: uint64\
            4: uint\
            5: int8\
            6: int16\
            7: int32\
            8: int64\
            9: int\
            10: float32\
            11: float64\
            12: string\
            13: nil
          type: integer
          enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
        Value:
          description: |
            Can be any value that is associated to the DataType
          type: object

    # create a new rule request
    RuleRequest:
      type: object
      required:
        - Name
        - GroupBy
        - Limit
      properties:
        Name:
          description: "Name of the rule to create"
          type: string
        GroupBy:
          description: |
            GroupBy defines the keys for any Key + Value Pairs that make a unique group for the rule.
            These are matched agains the item counters to know when limits are reached.
          type: array
          items:
            type: string
        Limit:
          description: "Max limit for any Key Value Group"
          type: integer
          format: uint64

    # Uppdate rule request
    UpdateRuleRequest:
      type: object
      required:
        - Limit
      properties:
        Limit:
          type: integer
          format: uint64
          description: default limit that all rules adhere to

    # List rules that match the provided key values
    RuleQuery:
      type: object
      properties:
        KeyValues:
          description: "Key Values to match rules against"
          $ref: "#/components/schemas/KeyValues"
        OverrideQuery:
          description: |
            "Include overrides for the found rule.
            - '' - don't include any overrides
            - "all" - includes all overrides for a rule
            - "match" - includes all overrides that also match the provided KeyValues
          type: string
          default: ""
          enum:
            - ""
            - "all"
            - "match"
    # Find rule response
    RuleResponse:
      type: object
      properties:
        Name:
          type: string
        GroupBy:
          type: array
          items:
            type: string
        Limit:
          type: integer
          format: uint64
        RuleOverrides:
          type: array
          items:
            type: object
            properties:
              KeyValues:
                $ref: "#/components/schemas/KeyValues"
              Limit:
                type: integer
                format: uint64

    ListRulesResponse:
      type: array
      items:
        $ref: "#/components/schemas/RuleResponse"

    # create a new rule request
    RuleOverride:
      type: object
      required:
        - Name
        - KeyValues
        - Limit
      properties:
        Name:
          description: "Name of the override rule to create"
          type: string
        KeyValues:
          $ref: "#/components/schemas/KeyValues"
        Limit:
          type: integer
          format: uint64
    RuleOverrides:
      type: array
      items:
        $ref: "#/components/schemas/RuleOverride"

    # incremenet response if a rule has already been reached
    LimitReachedResponse:
      type: object
      properties:
        RuleName:
          type: string
        Override:
          description: if an override was used to determine the limits reached
          type: object
          properties:
            KeyValues:
              $ref: "#/components/schemas/KeyValues"
            Limit:
              type: integer
              format: uint64
