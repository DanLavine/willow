openapi: "3.0.0"

info:
  description: Willow API
  title: Willow
  version: poc 0.0.2

paths:
  /health:
    get:
      operationId: health check
      description: |
        API to check that the service is reachable
      responses:
        200:
          description: service is running fine
  /v1/queues:
    post:
      operationId: create Queue
      description: |
        Create a new `Queue`
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/Queue"
      responses:
        201:
          description: Created a new `Queue`
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        409:
          description: Conflict if another `Queue` already exists with the same name
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
    get:
      operationId: list Queues
      description: |
        List all `Queues` without their `Channels`. At the moment this is just an API to ensure the state of the system. Because
        all the `Channels` are a collection of unkown KeyValues, it does not it makes sense to have this specific api accept
        some sort of query. Each of the `Queues` have their own the `Channels` and the end user setup can be specific
        as to what each queue is used for.
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      responses:
        200:
          description: Successfully searched for any rules that matched the query
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/Queues"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/queues/:queue_name:
    get:
      operationId: get Queue
      description: |
        Get a specific `Queue` by name
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      responses:
        200:
          description: |
            Retrieved a single `Queue`
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/Queue"
        400:
          description: Error parsing or validating the request parameters
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: The `Queue` could not be found
        409:
          description: The `Queue` is currently being destroyed
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
    put:
      operationId: update Queue
      description: |
        update a specific `Queue`
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/QueueProperties"
      responses:
        200:
          description: Successfully updated the `Queue`
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: The original `Queue` could not be found
        409:
          description: The `Queue` is currently being destroyed
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
    delete:
      operationId: delete Queue
      description: |
        Delete a specific `Queue` and any associated `Channels`. Any `Items` that are already processing when a `Channel`
        is deleted will receive an error message that the `Queue` has been destroyed during the heartbeat process. It
        is then up to the clients to stop processing the `Item` item they are working on.
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      responses:
        204:
          description: Successfully deleted the `Channel` for a `Queue`
        409:
          description: The `Queue` is currently being destroyed
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Unexpected error service side
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/queues/:queue_name/channels/items:
    post:
      operationId: enqueu Item
      description: |
        Enqueue an `Item` to a `Channel`. Each `Channel` is dynamically created based off the requests `KeyValues`
        if the channel does not yet exists. When all the items have been processed from a `Channel` they are automatically
        deleted
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        201:
          description: Enqueued the `Item` into a `Channel`
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: returned if the `Queue` name cannot be found
        409:
          description: |
            Conflict if the `Rule` has reached the max queue limit or some other api limitation
            like the Queue is being destroyed.
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
    get:
      operationId: dequeue Item
      description: |
        Dequeue an `Item` from any `Channel` that matches the query
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        description: |
          Query all `Channels.KeyValues` for an item to dequeue
        content:
          appplication/json:
            schema:
              $ref: "../common/components.yaml#/components/schemas/AssociatedQuery"
      responses:
        200:
          description: Successfully dequeued an item
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/Item"
        400:
          description: Error parsing or validating the request
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: returned if the `Queue` name cannot be found
        409:
          description: |
            Conflict if the `Rule` has been deleted while a client is waiting to dequeue an item
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        503:
          description: Service has gone down for a restart and the client should retry the reuest
    delete:
      operationId: delete Channel
      description: |
        Delete they channel that matches the exact KeyValues
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        description: |
          `Channel.Spec.DBDefinition.KeyValues` to delete
        content:
          appplication/json:
            schema:
              $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"
      responses:
        204:
          description: Successfully deleted all the channels
        400:
          description: Error parsing or validating the request
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: returned if the `Queue` name cannot be found or is already deleted
        409:
          description: |
            Conflict if the `Rule` or `Channel` is already being destroyed
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        503:
          description: Service has gone down for a restart and the client should retry the reuest
  /v1/queus/:queue_name/channels/items/ack:
    post:
      operationId: ack Item
      description: |
        Acknowledge an `Item's` completion with either a success or failure.
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/ItemAck"
      responses:
        200:
          description: Item was successfully acked
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: returned if the `Queue` or `Item` cannot be found to ACK
        409:
          description: |
            Conflict if the `Rule` is being deleted
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/queus/:queue_name/channels/items/heartbeat:
    post:
      operationId: heartbeat Item
      description: |
        Heartbeat an `Item` while the client is still processing the item. If the services no longer
        receives heartbeats then the item will be considered a failure.
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/ItemHeartbeat"
      responses:
        200:
          description: Item was successfully heartbeat
        400:
          description: Error parsing or validating the request body
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        404:
          description: returned if the `Queue` name or `Item` ID cannot be found
        409:
          description: |
            Conflict if the `Rule` is being deleted
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
components:
  schemas:
    # Item models
    Item:
      type: object
      description: |
        `Item` to save in the queue. This value is used as part of the Enqueue and Dequeue operations
      required:
        - Spec
      properties:
        Spec:
          type: object
          required:
            - DBDefinition
            - Properties
          properties:
            DBDefinition:
              type: object
              required:
                - KeyValues
              description: |
                Specification on the details of how to save the object and fields that dictate any logic
              properties:
                KeyValues:
                  additionalProperties:
                    title: Key
                    x-additionalPropertiesName: Key
                    $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"
            Properties:
              type: object
              required:
                - Timeout
              description: |
                Specification of all the fields for logical operations on the `Item`
              properties:
                Updateable:
                  description: |
                    If true, this item in the queue can be replced on another Enqueue request long as
                    no clients are processing this item. If set to false, this item will not be updated
                    on a subsequent request
                  type: boolean
                RetryCount:
                  description: |
                    Number of times to retry an item. If the item is updateable and can be retried. There
                    is a chance that the item will be updated before a retry operation takes place.
                  type: integer
                  format: uint64
                RetryPosition:
                  description: |
                    In the case of a retry. This indicates where to position the failed item for retrying.
                    `front` will position the item at the front of the queue to immediately be picked up again.
                    However, if the item is updateable, this operation can removed the `Item` if there is another
                    item in the queue. `back` will put the item at the back of the queue to eventually be processed again.
                  type: string
                  default: front
                  enum:
                    - front
                    - back
                TimeoutDuration:
                  description: |
                    How long an item should last befor it is considered a 'failure' on the service side if no
                    heartbeats were received for the item. This is the time in nanoseconds for how long to wait.
                    If this set as 0, then the server's configuration will be used as the default.

                    NOTE: this is the time in nanoseconds so `1000000000` = 1 second
                  type: integer
                  format: int64
        State:
          type: object
          readOnly: true
          description: |
            Read-Only data about the `Item`
          properties:
            ID:
              type: string
              description: |
                ID of the Item save in the DB. Can be used as the `ID` field in other apis (ACK and Heartbeat).
    
    ItemAck:
      type: object
      required:
        - ItemID
        - Success
        - KeyValues
      properties:
        ItemID:
          type: string
        Success:
          type: boolean
        KeyValues:
          $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"

    ItemHeartbeat:
      type: object
      required:
        - ItemID
        - KeyValues
      properties:
        ItemID:
          type: string
        KeyValues:
          $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"

    # Channel models
    Channels:
      type: array
      items:
        $ref: "#/components/schemas/Channel"
    
    Channel:
      type: object
      description: |
        Channels are not directly created, but generated on the fly if no from an Item's KeyValues specification.
        Similarly, they are automatically deleted if no items are left for the same collection of KeyValues
      properties:
        Spec:
          type: object
          required:
            - DBDefinition
            - Properties
          properties:
            DBDefinition:
              type: object
              required:
                - KeyValues
              description: |
                Specification on the details of how to save the object and fields that dictate any logic
              properties:
                KeyValues:
                  additionalProperties:
                    title: Key
                    x-additionalPropertiesName: Key
                    $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"
        State:
          type: object
          readOnly: true
          description: |
            Read-Only data about the `Item`
          properties:
            EnqueuedItems:
              type: integer
              format: int64
              description: |
                Number of items currently enqueued that are not processing
            ProcessingItems:
              type: integer
              format: int64
              description: |
                Number of items currently being processed
    

    # Queue Models
    Queues:
      type: array
      items:
        $ref: "#/components/schemas/Queue"

    Queue:
      type: object
      description: |
        `Queue` to save in the DB that all other actions will work with
      required:
        - Spec
      properties:
        Spec:
          type: object
          required:
            - DBDefinition
            - Properties
          properties:
            DBDefinition:
              type: object
              required:
                - Name
              description: |
                Specification on the details of how to save the object and fields that dictate any logic
              properties:
                Name:
                  type: string
            Properties:
              $ref: "#/components/schemas/QueueProperties"
        State:
          type: object
          readOnly: true
          description: |
            Read-Only data about the `Item`
          properties:
            ID:
              type: string
              description: |
                ID of the Item save in the DB. Can be used as the `ID` field in other apis (ACK and Heartbeat).
    
    QueueProperties:
      type: object
      properties:
        MaxItems:
          type: integer
          format: int64
          description: |
            Max number of `Items` that can be both enqueued and running for a Queue
