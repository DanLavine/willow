openapi: "3.0.0"

info:
  description: Locker API
  title: Locker
  version: poc 0.0.1

paths:
  /health:
    get:
      operationId: health check
      description: |
        API to check that the service is reachable
      responses:
        200:
          description: "service is running fine"
  /v1/locks:
    post:
      operationId: create Lock
      description: |
        Create or obtain a `Lock` for a collection of `KeyValues`. This request blocks if another process
        already has the lock being requested. It will eventually return if the lock has been freed and
        claimed, or the server is shutdown. In which case, the client will need to retry claiming the lock
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/CreateLockRequest"
      responses:
        200:
          description: created or obtained the lock
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/CreateLockResponse"
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        503:
          description: server is shutting down for a restart and client should retry obtaining the lock
    get:
      operationId: list Locks
      description: |
        List all the locks currently in use by this service that match the query
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "../common/components.yaml#/components/schemas/AssociatedKeyValuesQuery"
      responses:
        200:
          description: OK
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/locks/:lock_id:
    delete:
      operationId: delete Lock
      description: |
        Delete a `Lock` based on the SessionID. This way the original client should be the only
        client to know the generated SessionID. If the client is lost for some reason and the timeout is
        massive. The original SessionID can be found via the query and deleted through another request
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/LockClaim"
      responses:
        204:
          description: Resrouce was deleted or never even existed
        404:
          description: returned when the lock_id cannot be found
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        409:
          description: returned when there was an error processing the SessionID
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/locks/:lock_id/heartbeat:
    post:
      operationId: heartbeat Lock
      description: |
        Heartbeat a lock by the unique SessionID
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/LockClaim"
      responses:
        200:
          description: OK
        404:
          description: returned when the lock_id cannot be found
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        409:
          description: returned when there was an error processing the SessionID
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"

components:
  schemas:
    LockClaim:
      type: object
      properties:
        SessionID:
          description: |
            The unique SessionID returned when a lock was originally claimed
          type: string

    CreateLockRequest:
      type: object
      required:
        - KeyValues
      properties:
        KeyValues:
          allOf:
            - $ref: "../common/components.yaml#/components/schemas/KeyValues"
        LockTimeout:
          description: |
            How long a server will keep the lock. This value is refreshed when a heartbeat is received. If
            this is set 0, then the servers default LockTimeout configuration will be used.

            NOTE: this time is represented in nanoseconds, so `1000000000` = 1 second
          type: integer
          format: int64
          minimum: 1000000000

    CreateLockResponse:
      type: object
      properties:
        LockID:
          description: ID for the `Lock`
          type: string
        SessionID:
          description: "Unique session ID that needs to be used when heartbeating or releasing the lock"
          type: string
        LockTimeout:
          description: |
            How long a server will keep the lock. This value is refreshed when a heartbeat is received.
            Clients should ensure the lock is heartbeat a few time per session to ensure network issues
            don't cause a lock to be lost entierly.
          type: integer
          format: int64
          minimum: 1000000000

    # list locks response
    ListResponse:
      type: object
      properties:
        Locks:
          type: array
          items:
            type: object
            properties:
              SessionID:
                type: string
              KeyValues:
                $ref: "../common/components.yaml#/components/schemas/KeyValues"
              Timeout:
                type: integer
                format: int64
              TimeTillExpire:
                type: integer
                format: int64
              LocksHeldOrWaiting:
                type: integer
