openapi: "3.0.0"

info:
  description: Locker API
  title: Locker
  version: poc 0.0.2

paths:
  /health:
    get:
      operationId: health check
      description: |
        API to check that the service is reachable
      responses:
        200:
          description: "service is running fine"
  /v1/locks:
    post:
      operationId: create Lock
      description: |
        Create or obtain a `Lock` for a collection of `KeyValues`. This request blocks if another process
        already has the lock being requested. It will eventually return if the `Lock` has been freed and
        claimed, or the server is shutdown. In which case, the client will need to retry claiming the `Lock`
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/Lock"
      responses:
        200:
          description: created or obtained the `Lock`
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/Lock"
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
        503:
          description: server is shutting down for a restart and client should retry obtaining the `Lock`
    get:
      operationId: query Locks
      description: |
        List all the `Locks` currently in use by this service that match the query
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "../common/components.yaml#/components/schemas/AssociatedQuery"
      responses:
        200:
          description: OK
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/Locks"
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/locks/:lock_id:
    delete:
      operationId: delete Lock
      description: |
        Delete a `Lock` based on the SessionID. This way the original client should be the only
        client to know the generated SessionID. If the client is lost for some reason and the timeout is
        massive. The original SessionID can be found via the query and deleted through another request
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/LockClaim"
      responses:
        204:
          description: Resrouce was deleted or never even existed
        404:
          description: returned when the lock_id cannot be found
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        409:
          description: returned when there was an error processing the SessionID
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/locks/:lock_id/heartbeat:
    post:
      operationId: heartbeat Lock
      description: |
        Heartbeat a lock by the unique SessionID
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            enum: ["application/json"]
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "#/components/schemas/LockClaim"
      responses:
        200:
          description: OK
        404:
          description: returned when the lock_id cannot be found
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        409:
          description: returned when there was an error processing the SessionID
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        500:
          description: Internal error that should be addressed by the service maintainer
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  ApiError:
                    $ref: "../common/components.yaml#/components/schemas/ApiError"

components:
  schemas:
    LockClaim:
      type: object
      properties:
        SessionID:
          description: |
            The unique SessionID returned when a lock was originally claimed
          type: string

    Lock:
      type: object
      description: |
        Exclusive `Lock` that can be used to synchronize processes across many different appplications
      required:
        - Spec
      properties:
        Spec:
          type: object
          required:
            - DBDefinition
            - Properties
          properties:
            DBDefinition:
              type: object
              required:
                - KeyValues
              description: |
                Specification on the details of how to save the object and fields that dictate any logic
              properties:
                KeyValues:
                  additionalProperties:
                    title: Key
                    x-additionalPropertiesName: Key
                    $ref: "../common/db_definitions.yaml#/components/schemas/TypedKeyValues"
            Properties:
              type: object
              required:
                - Timeout
              description: |
                Specification of all the fields for logical operations on the `Lock`
              properties:
                Timeout:
                  type: integer
                  description: |
                    How long the `Lock` should exist before expiring. This can be refreshed with calls to the Heartbeat api
        State:
          type: object
          readOnly: true
          description: |
            Read-Only data about the lock
          properties:
            LockID:
              type: string
              description: |
                ID of the lock saved in the DB. Can be used as the `lock_id` field in other apis.
            SessionID:
              type: string
              description: |
                Unique identifier that the service that has clamed the lock can use to issue heartbeats. If a service restarts
                without releasing a lock. This SessionID can be used to know if the lock is still heald by the service
            TimeTillExpire:
              type: integer
              description: |
                How long until the lock expires and another process can claim the lock. This is represented as nanoseconds
            LocksHeldOrWaiting:
              type: integer
              description: |
                Total of how many clients are holding or waiting for the Lock

    Locks:
      type: array
      items:
        $ref: "#/components/schemas/Lock"