openapi: "3.0.0"

info:
  description: Locker API
  title: Locker
  version: poc 0.0.1

paths:
  /health:
    get:
      operationId: health check
      description: |
        API to check that the service is reachable from a client
      responses:
        200:
          description: "service is running find"
  /v1/locks:
    post:
      operationId: create Lock
      description: |
        Create or obtain a lock for a collection of `KeyValues`. This request blocks if another process
        already has the lock being requested. It will eventually return if the lock has been freed and
        claimed, or the server is restarting. In which case, the client will need to retry claiming the lock
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              type: object
              required:
                - KeyValues
              properties:
                Timeout:
                  type: integer
                  format: int64
                  default: 0
                  description: "If set to 0, then the server's configuration will be used"
                KeyValues:
                  minLength: 1
                  $ref: "../common/components.yaml#/components/schemas/KeyValues"
      responses:
        200:
          description: created or obtained the lock
          content:
            appplication/json:
              schema:
                type: object
                properties:
                  SessionID:
                    type: string
                    description: "Session ID that is used to send hertbeats or release obtained locks"
                  Timeout:
                    description: "How long a server will keep the lock. This value is refreshed when a heartbeat is received"
                    type: integer
                    format: int64
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        503:
          description: server is shutting down for a restart and client should retry obtaining the lock
    get:
      operationId: query Locks
      description: |
        Query all the locks currently in use by this service
      requestBody:
        required: true
        content:
          appplication/json:
            schema:
              $ref: "../common/components.yaml#/components/schemas/AssociatedKeyValuesQuery"
      responses:
        200:
          description: OK
          content:
            appplication/json:
              schema:
                $ref: "#/components/schemas/ListResponse"
        400:
          description: returned when an error processing for the request body fails
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
  /v1/locks/:_lock_session_id:
    delete:
      operationId: delete Lock
      description: |
        Delete a lock based on the SessionID. This way the original client should be the only
        client to know the generated sessionID. If the client is lost for some reason and the timeout is
        massive. The original sessionID can be found via the query and deleted through another admin request
      responses:
        204:
          description: Resrouce was deleted or never even existed
  /v1/locks/:_lock_session_id/heartbeat:
    post:
      operationId: heartbeat Lock
      description: |
        Heartbeat a lock by the unique SessionID
      responses:
        200:
          description: OK
        400:
          description: returned when an error when the request body fails validation
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"
        410:
          description: returned when there was an error processing the SessionID
          content:
            appplication/json:
              schema:
                $ref: "../common/components.yaml#/components/schemas/ApiError"

components:
  schemas:
    # list locks response
    ListResponse:
      type: object
      properties:
        Locks:
          type: array
          items:
            type: object
            properties:
              SessionID:
                type: string
              KeyValues:
                $ref: "../common/components.yaml#/components/schemas/KeyValues"
              Timeout:
                type: integer
                format: int64
              TimeTillExpire:
                type: integer
                format: int64
              LocksHeldOrWaiting:
                type: integer
