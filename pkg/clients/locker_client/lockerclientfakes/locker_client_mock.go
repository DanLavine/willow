// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/pkg/clients/locker_client (interfaces: LockerClient)

// Package lockerclientfakes is a generated GoMock package.
package lockerclientfakes

import (
	context "context"
	reflect "reflect"

	lockerclient "github.com/DanLavine/willow/pkg/clients/locker_client"
	v1locker "github.com/DanLavine/willow/pkg/models/api/v1locker"
	gomock "go.uber.org/mock/gomock"
)

// MockLockerClient is a mock of LockerClient interface.
type MockLockerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLockerClientMockRecorder
}

// MockLockerClientMockRecorder is the mock recorder for MockLockerClient.
type MockLockerClientMockRecorder struct {
	mock *MockLockerClient
}

// NewMockLockerClient creates a new mock instance.
func NewMockLockerClient(ctrl *gomock.Controller) *MockLockerClient {
	mock := &MockLockerClient{ctrl: ctrl}
	mock.recorder = &MockLockerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockerClient) EXPECT() *MockLockerClientMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockLockerClient) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockLockerClientMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockLockerClient)(nil).Done))
}

// Healthy mocks base method.
func (m *MockLockerClient) Healthy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockLockerClientMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockLockerClient)(nil).Healthy))
}

// ObtainLock mocks base method.
func (m *MockLockerClient) ObtainLock(arg0 context.Context, arg1 v1locker.CreateLockRequest) (lockerclient.Lock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainLock", arg0, arg1)
	ret0, _ := ret[0].(lockerclient.Lock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainLock indicates an expected call of ObtainLock.
func (mr *MockLockerClientMockRecorder) ObtainLock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainLock", reflect.TypeOf((*MockLockerClient)(nil).ObtainLock), arg0, arg1)
}
