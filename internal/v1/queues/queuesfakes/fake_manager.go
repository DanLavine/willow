// Code generated by counterfeiter. DO NOT EDIT.
package queuesfakes

import (
	"context"
	"sync"

	"github.com/DanLavine/willow/internal/v1/queues"
	v1 "github.com/DanLavine/willow/pkg/models/v1"
	"go.uber.org/zap"
)

type FakeManager struct {
	CreateStub        func(*zap.Logger, *v1.Create) *v1.Error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 *zap.Logger
		arg2 *v1.Create
	}
	createReturns struct {
		result1 *v1.Error
	}
	createReturnsOnCall map[int]struct {
		result1 *v1.Error
	}
	EnqueueStub        func(*zap.Logger, *v1.EnqueItem) *v1.Error
	enqueueMutex       sync.RWMutex
	enqueueArgsForCall []struct {
		arg1 *zap.Logger
		arg2 *v1.EnqueItem
	}
	enqueueReturns struct {
		result1 *v1.Error
	}
	enqueueReturnsOnCall map[int]struct {
		result1 *v1.Error
	}
	GetItemStub        func(*zap.Logger, context.Context, *v1.Ready) (*v1.DequeueItem, *v1.Error)
	getItemMutex       sync.RWMutex
	getItemArgsForCall []struct {
		arg1 *zap.Logger
		arg2 context.Context
		arg3 *v1.Ready
	}
	getItemReturns struct {
		result1 *v1.DequeueItem
		result2 *v1.Error
	}
	getItemReturnsOnCall map[int]struct {
		result1 *v1.DequeueItem
		result2 *v1.Error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) Create(arg1 *zap.Logger, arg2 *v1.Create) *v1.Error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 *zap.Logger
		arg2 *v1.Create
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeManager) CreateCalls(stub func(*zap.Logger, *v1.Create) *v1.Error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeManager) CreateArgsForCall(i int) (*zap.Logger, *v1.Create) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) CreateReturns(result1 *v1.Error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *v1.Error
	}{result1}
}

func (fake *FakeManager) CreateReturnsOnCall(i int, result1 *v1.Error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *v1.Error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *v1.Error
	}{result1}
}

func (fake *FakeManager) Enqueue(arg1 *zap.Logger, arg2 *v1.EnqueItem) *v1.Error {
	fake.enqueueMutex.Lock()
	ret, specificReturn := fake.enqueueReturnsOnCall[len(fake.enqueueArgsForCall)]
	fake.enqueueArgsForCall = append(fake.enqueueArgsForCall, struct {
		arg1 *zap.Logger
		arg2 *v1.EnqueItem
	}{arg1, arg2})
	stub := fake.EnqueueStub
	fakeReturns := fake.enqueueReturns
	fake.recordInvocation("Enqueue", []interface{}{arg1, arg2})
	fake.enqueueMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) EnqueueCallCount() int {
	fake.enqueueMutex.RLock()
	defer fake.enqueueMutex.RUnlock()
	return len(fake.enqueueArgsForCall)
}

func (fake *FakeManager) EnqueueCalls(stub func(*zap.Logger, *v1.EnqueItem) *v1.Error) {
	fake.enqueueMutex.Lock()
	defer fake.enqueueMutex.Unlock()
	fake.EnqueueStub = stub
}

func (fake *FakeManager) EnqueueArgsForCall(i int) (*zap.Logger, *v1.EnqueItem) {
	fake.enqueueMutex.RLock()
	defer fake.enqueueMutex.RUnlock()
	argsForCall := fake.enqueueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) EnqueueReturns(result1 *v1.Error) {
	fake.enqueueMutex.Lock()
	defer fake.enqueueMutex.Unlock()
	fake.EnqueueStub = nil
	fake.enqueueReturns = struct {
		result1 *v1.Error
	}{result1}
}

func (fake *FakeManager) EnqueueReturnsOnCall(i int, result1 *v1.Error) {
	fake.enqueueMutex.Lock()
	defer fake.enqueueMutex.Unlock()
	fake.EnqueueStub = nil
	if fake.enqueueReturnsOnCall == nil {
		fake.enqueueReturnsOnCall = make(map[int]struct {
			result1 *v1.Error
		})
	}
	fake.enqueueReturnsOnCall[i] = struct {
		result1 *v1.Error
	}{result1}
}

func (fake *FakeManager) GetItem(arg1 *zap.Logger, arg2 context.Context, arg3 *v1.Ready) (*v1.DequeueItem, *v1.Error) {
	fake.getItemMutex.Lock()
	ret, specificReturn := fake.getItemReturnsOnCall[len(fake.getItemArgsForCall)]
	fake.getItemArgsForCall = append(fake.getItemArgsForCall, struct {
		arg1 *zap.Logger
		arg2 context.Context
		arg3 *v1.Ready
	}{arg1, arg2, arg3})
	stub := fake.GetItemStub
	fakeReturns := fake.getItemReturns
	fake.recordInvocation("GetItem", []interface{}{arg1, arg2, arg3})
	fake.getItemMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetItemCallCount() int {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	return len(fake.getItemArgsForCall)
}

func (fake *FakeManager) GetItemCalls(stub func(*zap.Logger, context.Context, *v1.Ready) (*v1.DequeueItem, *v1.Error)) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = stub
}

func (fake *FakeManager) GetItemArgsForCall(i int) (*zap.Logger, context.Context, *v1.Ready) {
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	argsForCall := fake.getItemArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) GetItemReturns(result1 *v1.DequeueItem, result2 *v1.Error) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = nil
	fake.getItemReturns = struct {
		result1 *v1.DequeueItem
		result2 *v1.Error
	}{result1, result2}
}

func (fake *FakeManager) GetItemReturnsOnCall(i int, result1 *v1.DequeueItem, result2 *v1.Error) {
	fake.getItemMutex.Lock()
	defer fake.getItemMutex.Unlock()
	fake.GetItemStub = nil
	if fake.getItemReturnsOnCall == nil {
		fake.getItemReturnsOnCall = make(map[int]struct {
			result1 *v1.DequeueItem
			result2 *v1.Error
		})
	}
	fake.getItemReturnsOnCall[i] = struct {
		result1 *v1.DequeueItem
		result2 *v1.Error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.enqueueMutex.RLock()
	defer fake.enqueueMutex.RUnlock()
	fake.getItemMutex.RLock()
	defer fake.getItemMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ queues.Manager = new(FakeManager)
