// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/limiter/counters (interfaces: CounterConstructor)
//
// Generated by this command:
//
//	mockgen -destination=rulefakes/counter_constructor_mock.go -package=rulefakes github.com/DanLavine/willow/internal/limiter/counters CounterConstructor
//

// Package rulefakes is a generated GoMock package.
package rulefakes

import (
	reflect "reflect"

	counters "github.com/DanLavine/willow/internal/limiter/counters"
	v1 "github.com/DanLavine/willow/pkg/models/api/limiter/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockCounterConstructor is a mock of CounterConstructor interface.
type MockCounterConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockCounterConstructorMockRecorder
}

// MockCounterConstructorMockRecorder is the mock recorder for MockCounterConstructor.
type MockCounterConstructorMockRecorder struct {
	mock *MockCounterConstructor
}

// NewMockCounterConstructor creates a new mock instance.
func NewMockCounterConstructor(ctrl *gomock.Controller) *MockCounterConstructor {
	mock := &MockCounterConstructor{ctrl: ctrl}
	mock.recorder = &MockCounterConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterConstructor) EXPECT() *MockCounterConstructorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockCounterConstructor) New(arg0 *v1.CounteProperties) counters.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(counters.Counter)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockCounterConstructorMockRecorder) New(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockCounterConstructor)(nil).New), arg0)
}
