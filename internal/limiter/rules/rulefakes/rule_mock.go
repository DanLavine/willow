// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/limiter/rules (interfaces: Rule)

// Package rulefakes is a generated GoMock package.
package rulefakes

import (
	reflect "reflect"

	v1limitermodels "github.com/DanLavine/willow/internal/limiter/v1_limiter_models"
	servererrors "github.com/DanLavine/willow/internal/server_errors"
	v1 "github.com/DanLavine/willow/pkg/models/api/common/v1"
	v10 "github.com/DanLavine/willow/pkg/models/api/limiter/v1"
	datatypes "github.com/DanLavine/willow/pkg/models/datatypes"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// CascadeDeletion mocks base method.
func (m *MockRule) CascadeDeletion(arg0 *zap.Logger) *servererrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CascadeDeletion", arg0)
	ret0, _ := ret[0].(*servererrors.ApiError)
	return ret0
}

// CascadeDeletion indicates an expected call of CascadeDeletion.
func (mr *MockRuleMockRecorder) CascadeDeletion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CascadeDeletion", reflect.TypeOf((*MockRule)(nil).CascadeDeletion), arg0)
}

// DeleteOverride mocks base method.
func (m *MockRule) DeleteOverride(arg0 *zap.Logger, arg1 string) *servererrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOverride", arg0, arg1)
	ret0, _ := ret[0].(*servererrors.ApiError)
	return ret0
}

// DeleteOverride indicates an expected call of DeleteOverride.
func (mr *MockRuleMockRecorder) DeleteOverride(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOverride", reflect.TypeOf((*MockRule)(nil).DeleteOverride), arg0, arg1)
}

// FindLimits mocks base method.
func (m *MockRule) FindLimits(arg0 *zap.Logger, arg1 datatypes.KeyValues) (v1limitermodels.Limits, *servererrors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLimits", arg0, arg1)
	ret0, _ := ret[0].(v1limitermodels.Limits)
	ret1, _ := ret[1].(*servererrors.ApiError)
	return ret0, ret1
}

// FindLimits indicates an expected call of FindLimits.
func (mr *MockRuleMockRecorder) FindLimits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLimits", reflect.TypeOf((*MockRule)(nil).FindLimits), arg0, arg1)
}

// Get mocks base method.
func (m *MockRule) Get(arg0 *v10.RuleQuery) *v10.RuleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v10.RuleResponse)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRuleMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRule)(nil).Get), arg0)
}

// GetGroupByKeys mocks base method.
func (m *MockRule) GetGroupByKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGroupByKeys indicates an expected call of GetGroupByKeys.
func (mr *MockRuleMockRecorder) GetGroupByKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByKeys", reflect.TypeOf((*MockRule)(nil).GetGroupByKeys))
}

// Name mocks base method.
func (m *MockRule) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRuleMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRule)(nil).Name))
}

// QueryOverrides mocks base method.
func (m *MockRule) QueryOverrides(arg0 *zap.Logger, arg1 *v1.AssociatedQuery) (*v10.Overrides, *servererrors.ApiError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryOverrides", arg0, arg1)
	ret0, _ := ret[0].(*v10.Overrides)
	ret1, _ := ret[1].(*servererrors.ApiError)
	return ret0, ret1
}

// QueryOverrides indicates an expected call of QueryOverrides.
func (mr *MockRuleMockRecorder) QueryOverrides(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryOverrides", reflect.TypeOf((*MockRule)(nil).QueryOverrides), arg0, arg1)
}

// SetOverride mocks base method.
func (m *MockRule) SetOverride(arg0 *zap.Logger, arg1 *v10.Override) *servererrors.ApiError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOverride", arg0, arg1)
	ret0, _ := ret[0].(*servererrors.ApiError)
	return ret0
}

// SetOverride indicates an expected call of SetOverride.
func (mr *MockRuleMockRecorder) SetOverride(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOverride", reflect.TypeOf((*MockRule)(nil).SetOverride), arg0, arg1)
}

// Update mocks base method.
func (m *MockRule) Update(arg0 *zap.Logger, arg1 *v10.RuleUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update.
func (mr *MockRuleMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRule)(nil).Update), arg0, arg1)
}
