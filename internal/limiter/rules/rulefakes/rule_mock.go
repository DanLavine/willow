// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/limiter/rules (interfaces: Rule)

// Package rulefakes is a generated GoMock package.
package rulefakes

import (
	reflect "reflect"

	api "github.com/DanLavine/willow/pkg/models/api"
	v1 "github.com/DanLavine/willow/pkg/models/api/limiter/v1"
	datatypes "github.com/DanLavine/willow/pkg/models/datatypes"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockRule is a mock of Rule interface.
type MockRule struct {
	ctrl     *gomock.Controller
	recorder *MockRuleMockRecorder
}

// MockRuleMockRecorder is the mock recorder for MockRule.
type MockRuleMockRecorder struct {
	mock *MockRule
}

// NewMockRule creates a new mock instance.
func NewMockRule(ctrl *gomock.Controller) *MockRule {
	mock := &MockRule{ctrl: ctrl}
	mock.recorder = &MockRuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRule) EXPECT() *MockRuleMockRecorder {
	return m.recorder
}

// CascadeDeletion mocks base method.
func (m *MockRule) CascadeDeletion(arg0 *zap.Logger) *api.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CascadeDeletion", arg0)
	ret0, _ := ret[0].(*api.Error)
	return ret0
}

// CascadeDeletion indicates an expected call of CascadeDeletion.
func (mr *MockRuleMockRecorder) CascadeDeletion(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CascadeDeletion", reflect.TypeOf((*MockRule)(nil).CascadeDeletion), arg0)
}

// DeleteOverride mocks base method.
func (m *MockRule) DeleteOverride(arg0 *zap.Logger, arg1 string) *api.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOverride", arg0, arg1)
	ret0, _ := ret[0].(*api.Error)
	return ret0
}

// DeleteOverride indicates an expected call of DeleteOverride.
func (mr *MockRuleMockRecorder) DeleteOverride(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOverride", reflect.TypeOf((*MockRule)(nil).DeleteOverride), arg0, arg1)
}

// FindLimit mocks base method.
func (m *MockRule) FindLimit(arg0 *zap.Logger, arg1 datatypes.KeyValues) (uint64, *api.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLimit", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*api.Error)
	return ret0, ret1
}

// FindLimit indicates an expected call of FindLimit.
func (mr *MockRuleMockRecorder) FindLimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLimit", reflect.TypeOf((*MockRule)(nil).FindLimit), arg0, arg1)
}

// GenerateQuery mocks base method.
func (m *MockRule) GenerateQuery(arg0 datatypes.KeyValues) datatypes.AssociatedKeyValuesQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateQuery", arg0)
	ret0, _ := ret[0].(datatypes.AssociatedKeyValuesQuery)
	return ret0
}

// GenerateQuery indicates an expected call of GenerateQuery.
func (mr *MockRuleMockRecorder) GenerateQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateQuery", reflect.TypeOf((*MockRule)(nil).GenerateQuery), arg0)
}

// Get mocks base method.
func (m *MockRule) Get(arg0 *v1.RuleQuery) *v1.RuleResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*v1.RuleResponse)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockRuleMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRule)(nil).Get), arg0)
}

// GetGroupByKeys mocks base method.
func (m *MockRule) GetGroupByKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetGroupByKeys indicates an expected call of GetGroupByKeys.
func (mr *MockRuleMockRecorder) GetGroupByKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByKeys", reflect.TypeOf((*MockRule)(nil).GetGroupByKeys))
}

// Name mocks base method.
func (m *MockRule) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRuleMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRule)(nil).Name))
}

// SetOverride mocks base method.
func (m *MockRule) SetOverride(arg0 *zap.Logger, arg1 *v1.Override) *api.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOverride", arg0, arg1)
	ret0, _ := ret[0].(*api.Error)
	return ret0
}

// SetOverride indicates an expected call of SetOverride.
func (mr *MockRuleMockRecorder) SetOverride(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOverride", reflect.TypeOf((*MockRule)(nil).SetOverride), arg0, arg1)
}

// TagsMatch mocks base method.
func (m *MockRule) TagsMatch(arg0 *zap.Logger, arg1 datatypes.KeyValues) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagsMatch", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TagsMatch indicates an expected call of TagsMatch.
func (mr *MockRuleMockRecorder) TagsMatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagsMatch", reflect.TypeOf((*MockRule)(nil).TagsMatch), arg0, arg1)
}

// Update mocks base method.
func (m *MockRule) Update(arg0 *zap.Logger, arg1 *v1.RuleUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", arg0, arg1)
}

// Update indicates an expected call of Update.
func (mr *MockRuleMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRule)(nil).Update), arg0, arg1)
}
