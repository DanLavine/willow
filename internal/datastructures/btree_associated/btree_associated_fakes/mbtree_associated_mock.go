// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/datastructures/btree_associated (interfaces: BTreeAssociated)

// Package btreeassociatedfakes is a generated GoMock package.
package btreeassociatedfakes

import (
	reflect "reflect"

	datastructures "github.com/DanLavine/willow/internal/datastructures"
	datatypes "github.com/DanLavine/willow/pkg/models/datatypes"
	query "github.com/DanLavine/willow/pkg/models/query"
	gomock "go.uber.org/mock/gomock"
)

// MockBTreeAssociated is a mock of BTreeAssociated interface.
type MockBTreeAssociated struct {
	ctrl     *gomock.Controller
	recorder *MockBTreeAssociatedMockRecorder
}

// MockBTreeAssociatedMockRecorder is the mock recorder for MockBTreeAssociated.
type MockBTreeAssociatedMockRecorder struct {
	mock *MockBTreeAssociated
}

// NewMockBTreeAssociated creates a new mock instance.
func NewMockBTreeAssociated(ctrl *gomock.Controller) *MockBTreeAssociated {
	mock := &MockBTreeAssociated{ctrl: ctrl}
	mock.recorder = &MockBTreeAssociatedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBTreeAssociated) EXPECT() *MockBTreeAssociatedMockRecorder {
	return m.recorder
}

// CreateOrFind mocks base method.
func (m *MockBTreeAssociated) CreateOrFind(arg0 datatypes.StringMap, arg1 datastructures.OnCreate, arg2 datastructures.OnFind) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrFind", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrFind indicates an expected call of CreateOrFind.
func (mr *MockBTreeAssociatedMockRecorder) CreateOrFind(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrFind", reflect.TypeOf((*MockBTreeAssociated)(nil).CreateOrFind), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockBTreeAssociated) Delete(arg0 datatypes.StringMap, arg1 datastructures.CanDelete) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBTreeAssociatedMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBTreeAssociated)(nil).Delete), arg0, arg1)
}

// Find mocks base method.
func (m *MockBTreeAssociated) Find(arg0 datatypes.StringMap, arg1 datastructures.OnFind) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockBTreeAssociatedMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockBTreeAssociated)(nil).Find), arg0, arg1)
}

// FindByAssociatedID mocks base method.
func (m *MockBTreeAssociated) FindByAssociatedID(arg0 string, arg1 datastructures.OnFind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAssociatedID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByAssociatedID indicates an expected call of FindByAssociatedID.
func (mr *MockBTreeAssociatedMockRecorder) FindByAssociatedID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAssociatedID", reflect.TypeOf((*MockBTreeAssociated)(nil).FindByAssociatedID), arg0, arg1)
}

// Query mocks base method.
func (m *MockBTreeAssociated) Query(arg0 query.AssociatedKeyValuesQuery, arg1 datastructures.OnFindPagination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockBTreeAssociatedMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockBTreeAssociated)(nil).Query), arg0, arg1)
}
