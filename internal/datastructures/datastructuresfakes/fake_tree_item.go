// Code generated by counterfeiter. DO NOT EDIT.
package datastructuresfakes

import (
	"sync"

	"github.com/DanLavine/willow/internal/datastructures"
)

type FakeTreeItem struct {
	OnFindStub        func()
	onFindMutex       sync.RWMutex
	onFindArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTreeItem) OnFind() {
	fake.onFindMutex.Lock()
	fake.onFindArgsForCall = append(fake.onFindArgsForCall, struct {
	}{})
	stub := fake.OnFindStub
	fake.recordInvocation("OnFind", []interface{}{})
	fake.onFindMutex.Unlock()
	if stub != nil {
		fake.OnFindStub()
	}
}

func (fake *FakeTreeItem) OnFindCallCount() int {
	fake.onFindMutex.RLock()
	defer fake.onFindMutex.RUnlock()
	return len(fake.onFindArgsForCall)
}

func (fake *FakeTreeItem) OnFindCalls(stub func()) {
	fake.onFindMutex.Lock()
	defer fake.onFindMutex.Unlock()
	fake.OnFindStub = stub
}

func (fake *FakeTreeItem) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.onFindMutex.RLock()
	defer fake.onFindMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTreeItem) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ datastructures.TreeItem = new(FakeTreeItem)
