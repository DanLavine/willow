// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/server (interfaces: LimiterHandler)

// Package serverfakes is a generated GoMock package.
package serverfakes

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLimiterHandler is a mock of LimiterHandler interface.
type MockLimiterHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterHandlerMockRecorder
}

// MockLimiterHandlerMockRecorder is the mock recorder for MockLimiterHandler.
type MockLimiterHandlerMockRecorder struct {
	mock *MockLimiterHandler
}

// NewMockLimiterHandler creates a new mock instance.
func NewMockLimiterHandler(ctrl *gomock.Controller) *MockLimiterHandler {
	mock := &MockLimiterHandler{ctrl: ctrl}
	mock.recorder = &MockLimiterHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiterHandler) EXPECT() *MockLimiterHandlerMockRecorder {
	return m.recorder
}

// CreateGroupRule mocks base method.
func (m *MockLimiterHandler) CreateGroupRule(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateGroupRule", arg0, arg1)
}

// CreateGroupRule indicates an expected call of CreateGroupRule.
func (mr *MockLimiterHandlerMockRecorder) CreateGroupRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroupRule", reflect.TypeOf((*MockLimiterHandler)(nil).CreateGroupRule), arg0, arg1)
}

// DecrementItem mocks base method.
func (m *MockLimiterHandler) DecrementItem(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecrementItem", arg0, arg1)
}

// DecrementItem indicates an expected call of DecrementItem.
func (mr *MockLimiterHandlerMockRecorder) DecrementItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementItem", reflect.TypeOf((*MockLimiterHandler)(nil).DecrementItem), arg0, arg1)
}

// DeleteGroupRule mocks base method.
func (m *MockLimiterHandler) DeleteGroupRule(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteGroupRule", arg0, arg1)
}

// DeleteGroupRule indicates an expected call of DeleteGroupRule.
func (mr *MockLimiterHandlerMockRecorder) DeleteGroupRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroupRule", reflect.TypeOf((*MockLimiterHandler)(nil).DeleteGroupRule), arg0, arg1)
}

// FindGroupRule mocks base method.
func (m *MockLimiterHandler) FindGroupRule(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FindGroupRule", arg0, arg1)
}

// FindGroupRule indicates an expected call of FindGroupRule.
func (mr *MockLimiterHandlerMockRecorder) FindGroupRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGroupRule", reflect.TypeOf((*MockLimiterHandler)(nil).FindGroupRule), arg0, arg1)
}

// IncrementItem mocks base method.
func (m *MockLimiterHandler) IncrementItem(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementItem", arg0, arg1)
}

// IncrementItem indicates an expected call of IncrementItem.
func (mr *MockLimiterHandlerMockRecorder) IncrementItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementItem", reflect.TypeOf((*MockLimiterHandler)(nil).IncrementItem), arg0, arg1)
}

// UpdateGroupRule mocks base method.
func (m *MockLimiterHandler) UpdateGroupRule(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGroupRule", arg0, arg1)
}

// UpdateGroupRule indicates an expected call of UpdateGroupRule.
func (mr *MockLimiterHandlerMockRecorder) UpdateGroupRule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroupRule", reflect.TypeOf((*MockLimiterHandler)(nil).UpdateGroupRule), arg0, arg1)
}
