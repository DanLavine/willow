// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DanLavine/willow/internal/brokers/queues (interfaces: ManagedQueue)

// Package queuesfakes is a generated GoMock package.
package queuesfakes

import (
	context "context"
	reflect "reflect"

	v1 "github.com/DanLavine/willow/pkg/models/v1"
	gomock "go.uber.org/mock/gomock"
	zap "go.uber.org/zap"
)

// MockManagedQueue is a mock of ManagedQueue interface.
type MockManagedQueue struct {
	ctrl     *gomock.Controller
	recorder *MockManagedQueueMockRecorder
}

// MockManagedQueueMockRecorder is the mock recorder for MockManagedQueue.
type MockManagedQueueMockRecorder struct {
	mock *MockManagedQueue
}

// NewMockManagedQueue creates a new mock instance.
func NewMockManagedQueue(ctrl *gomock.Controller) *MockManagedQueue {
	mock := &MockManagedQueue{ctrl: ctrl}
	mock.recorder = &MockManagedQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedQueue) EXPECT() *MockManagedQueueMockRecorder {
	return m.recorder
}

// ACK mocks base method.
func (m *MockManagedQueue) ACK(arg0 *zap.Logger, arg1 *v1.ACK) *v1.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ACK", arg0, arg1)
	ret0, _ := ret[0].(*v1.Error)
	return ret0
}

// ACK indicates an expected call of ACK.
func (mr *MockManagedQueueMockRecorder) ACK(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ACK", reflect.TypeOf((*MockManagedQueue)(nil).ACK), arg0, arg1)
}

// Enqueue mocks base method.
func (m *MockManagedQueue) Enqueue(arg0 *zap.Logger, arg1 *v1.EnqueueItemRequest) *v1.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0, arg1)
	ret0, _ := ret[0].(*v1.Error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockManagedQueueMockRecorder) Enqueue(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockManagedQueue)(nil).Enqueue), arg0, arg1)
}

// Execute mocks base method.
func (m *MockManagedQueue) Execute(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockManagedQueueMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockManagedQueue)(nil).Execute), arg0)
}

// Metrics mocks base method.
func (m *MockManagedQueue) Metrics() *v1.QueueMetricsResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metrics")
	ret0, _ := ret[0].(*v1.QueueMetricsResponse)
	return ret0
}

// Metrics indicates an expected call of Metrics.
func (mr *MockManagedQueueMockRecorder) Metrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockManagedQueue)(nil).Metrics))
}

// Readers mocks base method.
func (m *MockManagedQueue) Readers(arg0 *zap.Logger, arg1 *v1.ReaderSelect) ([]<-chan func() *v1.DequeueItemResponse, *v1.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Readers", arg0, arg1)
	ret0, _ := ret[0].([]<-chan func() *v1.DequeueItemResponse)
	ret1, _ := ret[1].(*v1.Error)
	return ret0, ret1
}

// Readers indicates an expected call of Readers.
func (mr *MockManagedQueueMockRecorder) Readers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Readers", reflect.TypeOf((*MockManagedQueue)(nil).Readers), arg0, arg1)
}
